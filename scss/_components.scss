@use 'sass:color';

@use 'base';

// Generic
@mixin hover-scale($strength: 1.1) {
    transition: all 0.3s ease-in-out;

    &:hover {
        transform: scale($strength);
    }
}

@mixin outline-effect($type: 'standard') {
    // Push outline slightly inward to overlap with shadow
    outline-offset: -1px;
    outline: none;

    box-shadow: inset 0 0 0 0 base.$primary;
    transition: box-shadow 0.2s ease-in-out;

    &:focus,
    &:hover {
        $color: none;

        @if $type == standard {
            $color: base.$secondary;
            box-shadow: inset 0 0 0 calc(base.$outline-width * (3 / 4)) base.$secondary;
        } @else if $type == inverted {
            $color: base.$primary;
            box-shadow: inset 0 0 0 calc(base.$outline-width * (3 / 4)) base.$primary;
        }
    }
}

// Tags
@mixin button($type: 'standard', $hover-strength: 1.1, $add-spacing: true) {
    @include outline-effect($type);

    border-radius: base.$br-sm;

    cursor: pointer;

    font-family: inherit; // Don't know why, but the buttons don't get the correct font otherwise
    font-size: min(1.5rem, 2.5vw);

    @if $add-spacing {
        margin: base.$outline-width;
        padding: min(1.6vw, 0.6rem) min(5vw, 0.8rem);
    }

    @if $type == standard {
        outline: calc(base.$outline-width / 2) solid base.$secondary;
    } @else if $type == inverted {
        background-color: base.$secondary;
        color: white;
        outline: calc(base.$outline-width / 2) solid base.$primary;
    }
}

@mixin value-input($form: false) {
    @include outline-effect();

    color: base.$primary;
    font-family: inherit;

    padding: 0.4rem;

    border-radius: base.$br-sm;

    @if not $form {
        width: min(45%, 10rem);
    }
}

@mixin dropdown-input() {
    @include outline-effect();

    color: inherit;

    padding: 0.3rem;

    border-radius: base.$br-sm;
}

@mixin textarea() {
    @include outline-effect();

    padding: base.$outline-width;
    min-height: 5rem;

    border-radius: base.$br-sm;

    resize: vertical;
}

@mixin checkbox() {
    $size: 2rem;

    height: $size;
    aspect-ratio: 1;

    appearance: none;
    cursor: pointer;

    border: calc(base.$outline-width / 2) solid base.$secondary;
    border-radius: calc($size / 2.6);

    ~ .checkmark {
        position: absolute;

        width: $size;
        height: $size;

        pointer-events: none;

        display: flex;
        justify-content: center;
        align-items: center;
    }

    &:checked ~ .checkmark::after {
        content: '';

        width: 0.6rem;
        height: 1.3rem;

        border: solid base.$secondary;
        border-width: 0 calc($size / 7) calc($size / 7) 0;

        transform: translate(0, -10%) rotate(40deg);
    }
}

// Applied to div that contains input, label, and span
@mixin checkbox-container() {
    display: flex;
    align-items: center;

    gap: 3vw;

    position: relative;

    label {
        cursor: pointer;
    }

    input[type='checkbox'] {
        @include checkbox();
    }
}

@mixin form() {
    padding: base.$main-spacing 0 0;

    display: grid;
    gap: 4vw;
    grid-template-columns: 1fr;

    // Placeholder text
    input::placeholder,
    textarea::placeholder {
        color: color.scale(base.$primary, $lightness: 40%);
    }

    // All input types
    input {
        @include value-input(true);
    }

    // Checkboxes
    // Requirments
    // - Checkbox and its label to be wrapped in div
    // - span with "checkmark" class applied
    div:has(input[type='checkbox']) {
        @include checkbox-container();
    }

    // Dropdowns
    select {
        @include dropdown-input();
    }

    // Buttons
    button {
        @include button();
    }

    // Textarea
    textarea {
        @include textarea();
    }
}

// Layout
@mixin element-spacing($spacing: base.$main-spacing, $only-mobile: false, $include-last: false) {
    > *:not(:last-child) {
        margin-bottom: $spacing;
    }

    @if $include-last {
        > *:last-child {
            margin-bottom: $spacing;
        }
    }

    @media screen and (min-width: base.$breakpoint) {
        @if $only-mobile {
            > *:not(:last-child) {
                margin-bottom: 0;
            }
        }
        @if not $include-last {
            > *:last-child {
                margin-bottom: 0;
            }
        }
    }
}

// Other
@mixin card() {
    background-color: base.$section-color;
    color: base.$primary;

    padding: 0.75rem;
    border-radius: base.$br-md;
}
